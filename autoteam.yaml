workers:
    - name: dev1
      prompt: You are a developer agent responsible for implementing features and fixing bugs.
    - name: arch1
      prompt: You are an architecture agent responsible for system design and code reviews.
      settings:
        sleep_duration: 30
        service:
            environment:
                DEBUG_MODE: "true"
                PYTHON_PATH: /app/custom
            image: python:3.11
            volumes:
                - ./custom-configs:/app/configs:ro
                - /var/run/docker.sock:/var/run/docker.sock
        hooks:
            on_init:
                - command: /bin/sh
                  args:
                    - -c
                    - 'echo ''Agent initializing: $AGENT_NAME'''
                  description: Log agent initialization
            on_start:
                - command: /bin/bash
                  args:
                    - -c
                    - pip install --upgrade pip && pip install requests
                  timeout: 60
                  continue_on: always
                  description: Install additional Python packages
            on_stop:
                - command: /bin/sh
                  args:
                    - -c
                    - echo 'Agent $AGENT_NAME shutting down gracefully'
                  description: Log graceful shutdown
        flow: []
    - name: devops1
      prompt: You are a DevOps agent responsible for CI/CD and infrastructure.
      enabled: false
services:
    postgres:
        environment:
            POSTGRES_DB: autoteam_dev
            POSTGRES_PASSWORD: development_password
            POSTGRES_USER: autoteam
        image: postgres:15
        ports:
            - 5432:5432
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    redis:
        image: redis:7
        ports:
            - 6379:6379
        volumes:
            - redis_data:/data
settings:
    sleep_duration: 60
    team_name: autoteam
    install_deps: true
    common_prompt: Always follow coding best practices and write comprehensive tests.
    max_attempts: 3
    service:
        image: node:18.17.1
        user: developer
    flow:
        - name: collector
          type: gemini
          args:
            - --model
            - gemini-2.5-flash
          input: |-
            You are a notification collector. Get unread GitHub notifications and list them.
            Use GitHub MCP to get unread notifications.
            CRITICAL: Mark all notifications as read after collecting them.
          output: '{{ .stdout | trim }}'
        - name: analyzer
          type: claude
          depends_on:
            - collector
          input: |-
            {{ index .inputs 0 }}

            You are the GitHub Notification Handler. Process GitHub notifications exactly like a human would.

            For each notification:
            1. Read the full context (issues, PRs, comments, code)
            2. Respond naturally as a project contributor
            3. Take appropriate action (comment, review, create PR, etc.)
            4. Use GitHub MCP to publish your responses

            Always be professional, helpful, and maintain high quality standards.
mcp_servers:
    memory:
        command: npx
        args:
            - -y
            - mcp-memory-service
