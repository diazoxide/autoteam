// Package worker provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package worker

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"autoteam/internal/types"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for GetLogsParamsRole.
const (
	Both      GetLogsParamsRole = "both"
	Collector GetLogsParamsRole = "collector"
	Executor  GetLogsParamsRole = "executor"
)

// ConfigResponse defines model for ConfigResponse.
type ConfigResponse = types.ConfigResponse

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = types.ErrorResponse

// FlowInfo defines model for FlowInfo.
type FlowInfo = types.FlowInfo

// FlowResponse defines model for FlowResponse.
type FlowResponse = types.FlowResponse

// FlowStepInfo defines model for FlowStepInfo.
type FlowStepInfo = types.FlowStepInfo

// FlowStepsResponse defines model for FlowStepsResponse.
type FlowStepsResponse = types.FlowStepsResponse

// HealthCheck defines model for HealthCheck.
type HealthCheck = types.HealthCheck

// HealthResponse defines model for HealthResponse.
type HealthResponse = types.HealthResponse

// LogFile defines model for LogFile.
type LogFile = types.LogFile

// LogsResponse defines model for LogsResponse.
type LogsResponse = types.LogsResponse

// MetricsResponse defines model for MetricsResponse.
type MetricsResponse = types.MetricsResponse

// StatusResponse defines model for StatusResponse.
type StatusResponse = types.StatusResponse

// WorkerConfig Sanitized worker configuration
type WorkerConfig = types.WorkerConfig

// WorkerInfo defines model for WorkerInfo.
type WorkerInfo = types.WorkerInfo

// WorkerMetrics defines model for WorkerMetrics.
type WorkerMetrics = types.WorkerMetrics

// GetLogsParams defines parameters for GetLogs.
type GetLogsParams struct {
	// Role Filter logs by role (collector, executor, both) - auto-determined from file paths and names
	Role *GetLogsParamsRole `form:"role,omitempty" json:"role,omitempty"`

	// Limit Maximum number of log files to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetLogsParamsRole defines parameters for GetLogs.
type GetLogsParamsRole string

// GetLogFileParams defines parameters for GetLogFile.
type GetLogFileParams struct {
	// Tail Number of last lines to return (tail behavior)
	Tail *int `form:"tail,omitempty" json:"tail,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Worker configuration
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// API documentation
	// (GET /docs/)
	GetSwaggerUI(ctx echo.Context) error
	// Worker flow configuration
	// (GET /flow)
	GetFlow(ctx echo.Context) error
	// Flow step details
	// (GET /flow/steps)
	GetFlowSteps(ctx echo.Context) error
	// Worker health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// List worker logs
	// (GET /logs)
	GetLogs(ctx echo.Context, params GetLogsParams) error
	// Download log file
	// (GET /logs/{filename})
	GetLogFile(ctx echo.Context, filename string, params GetLogFileParams) error
	// Worker metrics
	// (GET /metrics)
	GetMetrics(ctx echo.Context) error
	// OpenAPI specification
	// (GET /openapi.yaml)
	GetOpenAPISpec(ctx echo.Context) error
	// Worker status
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetSwaggerUI converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaggerUI(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwaggerUI(ctx)
	return err
}

// GetFlow converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlow(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlow(ctx)
	return err
}

// GetFlowSteps converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowSteps(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowSteps(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogs(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLogs(ctx, params)
	return err
}

// GetLogFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", ctx.Param("filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogFileParams
	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", ctx.QueryParams(), &params.Tail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLogFile(ctx, filename, params)
	return err
}

// GetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetrics(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetrics(ctx)
	return err
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenAPISpec(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/docs/", wrapper.GetSwaggerUI)
	router.GET(baseURL+"/flow", wrapper.GetFlow)
	router.GET(baseURL+"/flow/steps", wrapper.GetFlowSteps)
	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/logs", wrapper.GetLogs)
	router.GET(baseURL+"/logs/:filename", wrapper.GetLogFile)
	router.GET(baseURL+"/metrics", wrapper.GetMetrics)
	router.GET(baseURL+"/openapi.yaml", wrapper.GetOpenAPISpec)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"62A3pXy8efx/AAAA///rWfrjZTYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
