/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Control plane health check
         * @description Returns the health status of the control plane and aggregated worker health
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workers
         * @description Returns list of all configured workers and their status
         */
        get: operations["getWorkers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get worker details
         * @description Returns details about a specific worker
         */
        get: operations["getWorker"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Worker health check
         * @description Proxy to worker's health endpoint
         */
        get: operations["getWorkerHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Worker status
         * @description Proxy to worker's status endpoint
         */
        get: operations["getWorkerStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Worker configuration
         * @description Proxy to worker's config endpoint
         */
        get: operations["getWorkerConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Worker logs
         * @description Proxy to worker's logs endpoint
         */
        get: operations["getWorkerLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}/logs/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Worker log file
         * @description Proxy to worker's log file endpoint
         */
        get: operations["getWorkerLogFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}/flow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Worker flow configuration
         * @description Proxy to worker's flow endpoint
         */
        get: operations["getWorkerFlow"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}/flow/steps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Worker flow steps
         * @description Proxy to worker's flow steps endpoint
         */
        get: operations["getWorkerFlowSteps"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workers/{worker_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Worker metrics
         * @description Proxy to worker's metrics endpoint
         */
        get: operations["getWorkerMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/openapi.yaml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OpenAPI specification
         * @description Returns the OpenAPI specification for this API
         */
        get: operations["getOpenAPISpec"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/docs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API documentation
         * @description Swagger UI for interactive API documentation
         */
        get: operations["getSwaggerUI"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ControlPlaneHealthResponse: {
            /**
             * @description Overall control plane health status
             * @enum {string}
             */
            status: "healthy" | "degraded" | "unhealthy";
            /**
             * Format: date-time
             * @description Health check timestamp
             */
            timestamp: string;
            /** @description Health status of each configured worker */
            workers_health: {
                [key: string]: "healthy" | "unhealthy" | "unreachable";
            };
            /** @description Additional health information */
            message?: string;
        };
        WorkersResponse: {
            workers: components["schemas"]["WorkerDetails"][];
            /** @description Total number of configured workers */
            total: number;
            /**
             * Format: date-time
             * @description Response timestamp
             */
            timestamp: string;
        };
        WorkerDetailsResponse: {
            worker: components["schemas"]["WorkerDetails"];
            /**
             * Format: date-time
             * @description Response timestamp
             */
            timestamp: string;
        };
        WorkerDetails: {
            /** @description Worker ID from configuration */
            id: string;
            /** @description Worker API URL */
            url: string;
            /**
             * @description Worker connectivity status
             * @enum {string}
             */
            status: "reachable" | "unreachable" | "unknown";
            /**
             * Format: date-time
             * @description Last health check timestamp
             */
            last_check?: string;
            /** @description Worker information (if reachable) */
            worker_info?: components["schemas"]["WorkerInfo"];
        };
        HealthResponse: {
            /**
             * @description Overall health status
             * @enum {string}
             */
            status: "healthy" | "unhealthy";
            /**
             * Format: date-time
             * @description Health check timestamp
             */
            timestamp: string;
            agent: components["schemas"]["WorkerInfo"];
            /** @description Individual health check results */
            checks?: {
                [key: string]: components["schemas"]["HealthCheck"];
            };
        };
        StatusResponse: {
            /**
             * @description Current operational status
             * @enum {string}
             */
            status: "idle" | "running" | "error";
            /**
             * @description Current operational mode
             * @enum {string}
             */
            mode: "both";
            /**
             * Format: date-time
             * @description Status timestamp
             */
            timestamp: string;
            agent: components["schemas"]["WorkerInfo"];
            /** @description Worker uptime duration */
            uptime?: string;
        };
        LogsResponse: {
            logs: components["schemas"]["LogFile"][];
            /** @description Total number of log files */
            total: number;
            /**
             * Format: date-time
             * @description Response timestamp
             */
            timestamp: string;
        };
        MetricsResponse: {
            metrics: components["schemas"]["WorkerMetrics"];
            /**
             * Format: date-time
             * @description Response timestamp
             */
            timestamp: string;
        };
        ConfigResponse: {
            config: components["schemas"]["WorkerConfig"];
            /**
             * Format: date-time
             * @description Response timestamp
             */
            timestamp: string;
        };
        FlowResponse: {
            flow: components["schemas"]["FlowInfo"];
            /**
             * Format: date-time
             * @description Response timestamp
             */
            timestamp: string;
        };
        FlowStepsResponse: {
            steps: components["schemas"]["FlowStepInfo"][];
            /** @description Total number of flow steps */
            total: number;
            /**
             * Format: date-time
             * @description Response timestamp
             */
            timestamp: string;
        };
        WorkerInfo: {
            /** @description Worker name */
            name: string;
            /** @description Worker type */
            type: string;
            /** @description Worker version */
            version: string;
            /** @description Worker availability status */
            available?: boolean;
        };
        HealthCheck: {
            /**
             * @description Health check result
             * @enum {string}
             */
            status: "pass" | "fail";
            /** @description Health check message */
            message?: string;
        };
        LogFile: {
            /** @description Log file name */
            filename: string;
            /**
             * Format: int64
             * @description File size in bytes
             */
            size: number;
            /**
             * Format: date-time
             * @description Last modified timestamp
             */
            modified: string;
            /**
             * @description Worker role associated with log
             * @enum {string}
             */
            role?: "collector" | "executor" | "both";
        };
        WorkerMetrics: {
            /** @description Agent uptime duration */
            uptime?: string;
            /** @description Average flow execution time */
            avg_execution_time?: string;
            /**
             * Format: date-time
             * @description Timestamp of last activity
             */
            last_activity?: string;
        };
        /** @description Sanitized worker configuration */
        WorkerConfig: {
            /** @description Worker name */
            name?: string;
            /** @description Worker type */
            type?: string;
            /** @description Worker enabled status as string */
            enabled?: string;
            /** @description Worker version */
            version?: string;
            /** @description Team name for this worker */
            team_name?: string;
            /** @description Number of flow steps configured */
            flow_steps?: number;
        };
        FlowInfo: {
            /** @description Total number of steps in the flow */
            total_steps: number;
            /** @description Number of enabled/active steps */
            enabled_steps: number;
            /**
             * Format: date-time
             * @description Timestamp of last flow execution
             */
            last_execution?: string;
            /** @description Total number of flow executions */
            execution_count?: number;
            /**
             * Format: float
             * @description Success rate of flow executions
             */
            success_rate?: number;
        };
        FlowStepInfo: {
            /** @description Unique step name */
            name: string;
            /** @description Agent type */
            type: string;
            /** @description Agent-specific arguments */
            args?: string[];
            /** @description Environment variables for the step */
            env?: {
                [key: string]: string;
            };
            /** @description List of step names this step depends on */
            depends_on?: string[];
            /** @description Input prompt for the step */
            input?: string;
            /** @description Output transformation template */
            output?: string;
            /** @description Skip condition template */
            skip_when?: string;
            /**
             * @description Policy for handling dependency failures
             * @enum {string}
             */
            dependency_policy?: "fail_fast" | "all_success" | "all_complete" | "any_success";
            retry?: components["schemas"]["RetryConfig"];
            /** @description Whether the step is enabled */
            enabled?: boolean;
            /** @description Whether the step is currently executing */
            active?: boolean;
            /**
             * Format: date-time
             * @description Timestamp of last execution
             */
            last_execution?: string;
            /** @description Number of times this step has been executed */
            execution_count?: number;
            /** @description Number of successful executions */
            success_count?: number;
            /** @description Output from last execution */
            last_output?: string;
            /** @description Error from last execution */
            last_error?: string;
            /** @description Current retry attempt (0 = first try) */
            retry_attempt?: number;
            /** @description Total retry attempts made */
            total_retries?: number;
            /**
             * Format: date-time
             * @description Timestamp of last retry attempt
             */
            last_retry_time?: string;
            /**
             * Format: date-time
             * @description Timestamp of next scheduled retry
             */
            next_retry_time?: string;
        };
        /** @description Configuration for retry behavior */
        RetryConfig: {
            /**
             * @description Maximum number of retry attempts
             * @default 1
             */
            max_attempts: number;
            /**
             * @description Initial delay between retries in seconds
             * @default 0
             */
            delay: number;
            /**
             * @description Backoff strategy for retry delays
             * @default fixed
             * @enum {string}
             */
            backoff: "fixed" | "exponential" | "linear";
            /**
             * @description Maximum delay between retries in seconds
             * @default 300
             */
            max_delay: number;
        };
        ErrorResponse: {
            /** @description Error message */
            error: string;
            /** @description Error code */
            code?: string;
            /**
             * Format: date-time
             * @description Error timestamp
             */
            timestamp: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Control plane health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ControlPlaneHealthResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of workers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkersResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkerDetailsResponse"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkerHealth: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Worker unreachable */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkerStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponse"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Worker unreachable */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkerConfig: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker configuration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigResponse"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Worker unreachable */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkerLogs: {
        parameters: {
            query?: {
                /** @description Filter logs by role (collector, executor, both) */
                role?: "collector" | "executor" | "both";
                /** @description Maximum number of log files to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker logs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogsResponse"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Worker unreachable */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkerLogFile: {
        parameters: {
            query?: {
                /** @description Number of last lines to return */
                tail?: number;
            };
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
                /** @description Log filename */
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Log file content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Worker or log file not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Worker unreachable */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkerFlow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker flow configuration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowResponse"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Worker unreachable */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkerFlowSteps: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker flow steps */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowStepsResponse"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Worker unreachable */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkerMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Worker ID */
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker metrics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsResponse"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Worker unreachable */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getOpenAPISpec: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OpenAPI specification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/x-yaml": string;
                };
            };
        };
    };
    getSwaggerUI: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Swagger UI HTML page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
}
