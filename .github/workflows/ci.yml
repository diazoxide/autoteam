name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      continue-on-error: true
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: make mod-tidy
    
    - name: Run tests
      run: make test
    
    - name: Run tests with race detection
      run: make test-race
    
    - name: Run code quality checks
      run: make check

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      continue-on-error: true
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: make mod-tidy
    
    - name: Generate code
      run: make codegen
    
    - name: Run tests with coverage
      run: make test-coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      continue-on-error: true
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: make mod-tidy
    
    - name: Build current platform
      run: make build
    
    - name: Build all platforms (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: make build-all
    
    - name: Upload build artifacts (Linux only)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: build/
        retention-days: 7

  dashboard:
    name: Dashboard
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json
    
    - name: Install dashboard dependencies
      run: |
        cd dashboard
        npm install
    
    - name: Lint dashboard
      run: |
        cd dashboard
        npm run lint
    
    - name: Type check dashboard
      run: |
        cd dashboard
        npm run type-check
    
    - name: Build dashboard
      run: |
        cd dashboard
        npm run build

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, dashboard]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Download dependencies
      run: make mod-tidy
    
    - name: Build binary
      run: |
        make build
        # Build current platform worker binary
        make build-worker
    
    - name: Test binary installation
      run: |
        # Test binary works
        ./build/autoteam --version
        ./build/autoteam --help
    
    - name: Test configuration initialization
      run: |
        # Test init command
        ./build/autoteam init
        test -f autoteam.yaml
    
    - name: Test configuration generation
      run: |
        # Test generate command with created config
        ./build/autoteam generate
        test -f .autoteam/compose.yaml
        test -d .autoteam/autoteam/workers
        test -f .autoteam/bin/entrypoint.sh
    
    - name: Validate generated Docker Compose
      run: |
        # Check if compose.yaml is valid
        docker compose -f .autoteam/compose.yaml config