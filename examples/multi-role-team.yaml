# Multi-Role Team Configuration
# Comprehensive example with multiple specialized agents

workers:
  - name: "developer"
    prompt: |
      You are a senior developer responsible for feature implementation.
    settings:
      service:
        environment:
          GITHUB_TOKEN: ${DEVELOPER_GITHUB_TOKEN}
    
  - name: "architect"
    prompt: |
      You are a system architect focused on design and scalability.
    settings:
      service:
        image: "golang:1.21"
        volumes:
          - "./arch-configs:/app/configs:ro"
        environment:
          GITHUB_TOKEN: ${ARCHITECT_GITHUB_TOKEN}
          ARCH_MODE: "strict"
    
  - name: "reviewer"
    prompt: |
      You are a code reviewer ensuring quality and best practices.
    settings:
      service:
        environment:
          GITHUB_TOKEN: ${REVIEWER_GITHUB_TOKEN}

  - name: "tester"
    prompt: |
      You are a QA engineer responsible for testing and bug validation.
    settings:
      service:
        image: "python:3.11"
        volumes:
          - "./test-data:/app/test-data"
        environment:
          GITHUB_TOKEN: ${TESTER_GITHUB_TOKEN}
          TEST_ENV: "staging"

settings:
  service:
    image: "node:18.17.1"
    user: "developer"
    volumes:
      - "./shared-configs:/app/configs"
  team_name: "enterprise-team"
  sleep_duration: 45
  install_deps: true
  
  # Two-Layer Architecture
  collector_agent:
    type: gemini
    args: ["--model", "gemini-2.5-flash"]
    prompt: |
      You are a notification collector for enterprise team. Get unread GitHub notifications and list them.
      Use GitHub MCP to get notifications in format: {NOTIFICATION URL} - {NOTIFICATION TEXT}
      Mark all notifications as read after processing.
      
  execution_agent:
    type: claude
    args: []
    prompt: |
      You are the enterprise task execution agent. Execute tasks with enterprise-grade quality.
      For comments: respond professionally on GitHub
      For PR reviews: provide comprehensive review feedback
      For assigned issues: implement with proper architecture and testing
      
  # MCP Server Configuration
  mcp_servers:
    github:
      command: /opt/autoteam/bin/github-mcp-server
      args: ["stdio"]
      env:
        GITHUB_PERSONAL_ACCESS_TOKEN: $$GITHUB_TOKEN